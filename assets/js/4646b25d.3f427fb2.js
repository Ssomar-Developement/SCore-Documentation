"use strict";(self.webpackChunkscore_documentation=self.webpackChunkscore_documentation||[]).push([[596],{2098:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>l,contentTitle:()=>v,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"score/library_tools/server_property_checkers","title":"Server Property Checkers","description":"This page is mainly for teaching you what to use when writing your logic to properly implement","source":"@site/docs/score/library_tools/server_property_checkers.md","sourceDirName":"score/library_tools","slug":"/score/library_tools/server_property_checkers","permalink":"/SCore-Documentation/docs/score/library_tools/server_property_checkers","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/score/library_tools/server_property_checkers.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"SCore","previous":{"title":"Dependency Management","permalink":"/SCore-Documentation/docs/score/library_tools/dependency_management"},"next":{"title":"Feature Parent Interface","permalink":"/SCore-Documentation/docs/category/feature-parent-interface"}}');var r=i(4848),t=i(8453);const o={sidebar_position:1},v="Server Property Checkers",l={},a=[];function c(n){const e={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,t.R)(),...n.components},{Details:i}=e;return i||function(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"server-property-checkers",children:"Server Property Checkers"})}),"\n",(0,r.jsx)(e.p,{children:"This page is mainly for teaching you what to use when writing your logic to properly implement\nfeatures while considering backwards compatibility"}),"\n",(0,r.jsxs)(i,{children:[(0,r.jsx)("summary",{children:"Reference from SCore.java as of September 14, 2025 version. Use these public boolean methods to make the logic of your code\nwork properly while considering the user's server version"}),(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'    /* The server is folia? */\n    public static boolean isFolia() {\n        return isFolia || isLuminol || isPaperOrForkFor1v20lus /* Paper include threaded region of Folia in 1.20 +*/ || hasClass("io.papermc.paper.threadedregions.scheduler.AsyncScheduler");\n    }\n\n    /* The server is spigot? */\n    public static boolean isSpigot() {\n        return isSpigot;\n    }\n\n    /* The server is paper? */\n    public static boolean isPaper() {\n        return isPaper;\n    }\n\n    /* The server is mohist? */\n    public static boolean isMohist() {\n        return isMohist;\n    }\n\n    /* The server is purpur? */\n    public static boolean isPurpur() {\n        return isPurpur;\n    }\n\n    public static boolean isPufferfish() {\n        return isPufferfish;\n    }\n\n    /* The server is in 1.8 ? */\n    public static boolean is1v8() {\n        return is1v8;\n    }\n\n    /* The server is in 1.9 ? */\n    public static boolean is1v9() {\n        return is1v9;\n    }\n\n    /* The server is in 1.10 ? */\n    public static boolean is1v10() {\n        return is1v10;\n    }\n\n    /* The server is in 1.11 ? */\n    public static boolean is1v11() {\n        return is1v11;\n    }\n\n    /* The server is in 1.12 ? */\n    public static boolean is1v12() {\n        return is1v12;\n    }\n\n    /* The server is in 1.13 ? */\n    public static boolean is1v13() {\n        return is1v13;\n    }\n\n    /* The server is in 1.14 ? */\n    public static boolean is1v14() {\n        return is1v14;\n    }\n\n    /* The server is in 1.15 ? */\n    public static boolean is1v15() {\n        return is1v15;\n    }\n\n    /* The server is in 1.16 ? */\n    public static boolean is1v16() {\n        return is1v16;\n    }\n\n    /* The server is in 1.16 ? */\n    public static boolean is1v16v1() {\n        return is1v16v1;\n    }\n\n    /* The server is in 1.17 ? */\n    public static boolean is1v17() {\n        return is1v17;\n    }\n\n    /* The server is in 1.18 ? */\n    public static boolean is1v18() {\n        return is1v18;\n    }\n\n    /* The server is in 1.19 ? */\n    public static boolean is1v19() {\n        return is1v19;\n    }\n\n    /* The server is in 1.19 ? */\n    public static boolean is1v19v1() {\n        return is1v19v1;\n    }\n\n    public static boolean is1v19v4() {\n        return is1v19v4;\n    }\n\n    /* The server is in 1.20? */\n    public static boolean is1v20() {\n        return is1v20;\n    }\n\n    /* The server is in 1.20.1? */\n    public static boolean is1v20v1() {\n        return is1v20v1;\n    }\n\n    /* The server is in 1.20.4? */\n    public static boolean is1v20v4() {\n        return is1v20v4;\n    }\n\n    /* The server is in 1.20.5? */\n    public static boolean is1v20v5() {\n        return is1v20v5;\n    }\n\n    /* The server is in 1.20.6? */\n    public static boolean is1v20v6() {\n        return is1v20v6;\n    }\n\n    /* The server is in 1.21? */\n    public static boolean is1v21() {\n        return is1v21;\n    }\n\n    public static boolean is1v21v2() {\n        return is1v21v2;\n    }\n\n    public static boolean is1v21v3() {\n        return is1v21v3;\n    }\n\n    public static boolean is1v21v4() {\n        return is1v21v4;\n    }\n\n    public static boolean is1v21v5() {\n        return is1v21v5;\n    }\n\n    public static boolean is1v21v6() {\n        return is1v21v6;\n    }\n\n    public static boolean is1v21v7() {\n        return is1v21v7;\n    }\n\n    public static boolean is1v21v8() {\n        return is1v21v8;\n    }\n\n    public static boolean is1v22() {\n        return is1v22;\n    }\n\n    public static boolean is1v23() {\n        return is1v23;\n    }\n\n    /* The server is in 1.12 or - ? */\n    public static boolean is1v11Less() {\n        return is1v8() || is1v9() || is1v10() || is1v11();\n    }\n\n    /* The server is in 1.12 or - ? */\n    public static boolean is1v12Less() {\n        return is1v8() || is1v9() || is1v10() || is1v11() || is1v12();\n    }\n\n    /* The server is in 1.13 or - ? */\n    public static boolean is1v13Less() {\n        return is1v8() || is1v9() || is1v10() || is1v11() || is1v12() || is1v13();\n    }\n\n    /* The server is in 1.16 or + ? */\n    public static boolean is1v16Plus() {\n        return is1v16() || is1v17Plus();\n    }\n\n    /* The server is in 1.17 or + ? */\n    public static boolean is1v17Plus() {\n        return is1v17() || is1v18Plus();\n    }\n\n    /* The server is in 1.18 or + ? */\n    public static boolean is1v18Plus() {\n        return is1v18() || is1v19Plus();\n    }\n\n    /* The server is in 1.19 or + ? */\n    public static boolean is1v19Plus() {\n        return is1v19() || is1v19v1() || is1v19v4Plus();\n    }\n\n    public static boolean is1v19v4Plus() {\n        return is1v19v4() || is1v20Plus();\n    }\n\n    /* The server is in 1.20 or + ? */\n    public static boolean is1v20Plus() {\n        return is1v20() || is1v20v1Plus();\n    }\n\n    /* The server is in 1.20.1 or + ? */\n    public static boolean is1v20v1Plus() {\n        return is1v20v1() || is1v20v4Plus();\n    }\n\n    /* The server is in 1.20.4 or + ? */\n    public static boolean is1v20v4Plus() {\n        return is1v20v4() || is1v20v5Plus();\n    }\n\n    /* The server is in 1.20.5 or + ? */\n    public static boolean is1v20v5Plus() {\n        return is1v20v5() || is1v20v6Plus();\n    }\n    /* The server is in 1.20.6 or + ? */\n    public static boolean is1v20v6Plus() {\n        return  is1v20v6() || is1v21Plus();\n    }\n\n    public static boolean is1v21Plus() {\n        return is1v21();\n    }\n\n    public static boolean is1v21v2Plus() {\n        return is1v21v2()  || is1v21v3() || is1v21v4Plus();\n    }\n\n    public static boolean is1v22Plus() {\n        return is1v22() || is1v23Plus();\n    }\n\n    public static boolean is1v23Plus() {\n        return is1v23();\n    }\n\n    public static boolean is1v21v4Plus() {\n        return is1v21v4() || is1v21v5Plus();\n    }\n\n    public static boolean is1v21v5Plus() {\n        return is1v21v5() || is1v21v6Plus();\n    }\n\n    public static boolean is1v21v6Plus() {\n        return is1v21v6() || is1v21v7Plus();\n    }\n\n    public static boolean is1v21v7Plus() {\n        return  is1v21v7() || is1v21v8() || is1v22Plus();\n    }\n\n    public static boolean isVersionBetween(String version1, String version2) {\n        version1 = version1.replace(".yml", "").replace("_",".");\n        version2 = version2.replace(".yml", "").replace("_",".");\n        int version1Int = 0;\n        int version2Int = 0;\n\n        String[] version1Split = version1.split("\\\\.");\n        for (int i = 0; i < version1Split.length; i++) {\n            version1Int += (int) (Integer.parseInt(version1Split[i].trim()) * Math.pow(100, 3 - i));\n        }\n        if(!version2.isEmpty()) {\n            String[] version2Split = version2.split("\\\\.");\n            for (int i = 0; i < version2Split.length; i++) {\n                version2Int += (int) (Integer.parseInt(version2Split[i].trim()) * Math.pow(100, 3 - i));\n            }\n        }\n        else version2Int = Integer.MAX_VALUE;\n\n        String serverVersion = Bukkit.getServer().getVersion().split(":")[1].replace(")","");\n        int serverVersionInt = 0;\n        String[] serverVersionSplit = serverVersion.split("\\\\.");\n        for (int i = 0; i < serverVersionSplit.length; i++) {\n            serverVersionInt += (int) (Integer.parseInt(serverVersionSplit[i].trim()) * Math.pow(100, 3 - i));\n        }\n\n\n        /* SsomarDev.testMsg("serverVersion: "+serverVersion+" >> "+serverVersionInt, true);\n        SsomarDev.testMsg("version1: "+version1+" >> "+version1Int, true);\n        SsomarDev.testMsg("version2: "+version2+" >> "+version2Int, true);*/\n\n        return serverVersionInt >= version1Int && serverVersionInt <= version2Int;\n\n    }\n\n\n\n\n    public static boolean isSpigotOrFork(){\n        return isSpigot() || isPaperOrFork();\n    }\n\n    public static boolean isPaperOrFork(){\n        return isPaper() || isFolia() || isMohist() || isPurpur() || isPufferfish() || isPaperOrForkFor1v20lus;\n    }\n\n'})})]})]})}function u(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(c,{...n})}):c(n)}},8453:(n,e,i)=>{i.d(e,{R:()=>o,x:()=>v});var s=i(6540);const r={},t=s.createContext(r);function o(n){const e=s.useContext(t);return s.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function v(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:o(n.components),s.createElement(t.Provider,{value:e},n.children)}}}]);